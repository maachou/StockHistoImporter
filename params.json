{"name":"Stockhistoimporter","tagline":"Historical Stock quotes importer","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Description:\r\nStockHistoImporter is a command line tool that imports historical stock quotes into a database for a given stock symbol.\r\n## Application workflow:\r\nThis tool takes as an input a list of stock symbols and perform those following operations in order:\r\n\r\n1. Check the validity of a symbol.\r\n2. If the symbol is valid and does not exist in the database (T_STOCKS) he create the associated stock from the info retrieved from yahoo suggestion API and then store it in the database.\r\n3. Retrieve and parse the last X years of historical quote data using Yahoo finance API (I found an implementation developed by [Hans-Dietel Thiel Consulting limited](http://www.hans-dieter-thiel.de/YahooFinance.96.0.html?&L=1)).\r\n4. Store the results into the database(T_STOCK_HISTO_QUOTES).\r\n\r\nIf the stock already exists in the database he update it with fresh data.\r\n\r\n## Configurations:\r\n### ebeans.properties:\r\n* **Database parameters:** In my case I used a MySQL database but you are free to choose between an H2, Oracle or PostgreSQL database.\r\nDepending on your choice you have to setup your default datasource:\r\n\r\n```properties\r\ndatasource.default=mysql  # MYSQL database (possible values: h2,ora,pg,mysql).\r\n```\r\n\r\nThen setup the database name , server hostname, port, user and password:\r\n\r\n```properties\r\ndatasource.mysql.username=DB_USERNAME\r\ndatasource.mysql.password=DB_PASSWORD\r\ndatasource.mysql.databaseUrl=jdbc:mysql://DB_IP:DB_PORT/DB_NAME\r\n```\r\n\r\n* **Database model generation:** In order to generate properly the tables, we have to activate this lines:\r\n\r\n```properties\r\nebean.ddl.generate=true\r\nebean.ddl.run=true\r\n```\r\nAfter running for the first time the generated Jar:  2 tables will be created T_STOCKS and T_STOCKS_HISTO_QUOTES.\r\nWe should now disable the above 2 options and regenerate our definitive jar.\r\n\r\n* **Model classes location:** You should specify where Ebean will find the model classes\r\n\r\n```properties\r\nebean.search.jars=StockHistoImporter-1.0-SNAPSHOT.jar\r\n```\r\nIf you decide to change the name of the generated jar don't forget to update this parameter.\r\n\r\n### Yahoo Finance API maven dependency:\r\nI used in this project The Yahoo finance API implementation developed by  Hans-Dietel Thiel Consulting limited. \r\nSince  the project is not present in maven central repository.\r\nYou will have to checkout the project and compile it on your local machine so the project can compile successfully. \r\n\r\nTo checkout the project execute the command :\r\n\r\n```bash\r\nsvn co https://yahoofinanceapi.svn.sourceforge.net/svnroot/yahoofinanceapi yahoofinanceapi\r\n```\r\n\r\nThen execute a mvn install in the trunk folder.\r\n\r\n## Build&Run:\r\n\r\n* To build the application just run the script build.sh\r\n* The application take as input 2 parameters: \r\n  * Stock symbols list with the option -s : ex.  -s GOOG YHOO\r\n  * Total years of historical data with the option -y : ex. -y 10\r\n\r\nAn example of running the application would be:\r\n```bash\r\njava -jar target/StockHistoImporter-1.0-SNAPSHOT.jar -s YHOO GOOG -y 10\r\n```\r\n## Technologies used:\r\n\r\n* Java.\r\n* [Avaje Ebean ORM persistence Layer](http://www.avaje.org/).\r\n* [Yahoo Finance API](http://finance.yahoo.com/).\r\n* [Gson](http://code.google.com/p/google-gson/).\r\n* [Joda time](http://joda-time.sourceforge.net/).\r\n* [Junit](http://www.junit.org/).\r\n\r\n"}